// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using TesteEFToolPower.Models;

#nullable disable

namespace TesteEFToolPower.Data
{
    public partial class FinancesContext : DbContext
    {
        public FinancesContext()
        {
        }

        public FinancesContext(DbContextOptions<FinancesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Carteira> Carteira { get; set; }
        public virtual DbSet<FormaPagamento> FormaPagamento { get; set; }
        public virtual DbSet<Investimento> Investimento { get; set; }
        public virtual DbSet<Pagar> Pagar { get; set; }
        public virtual DbSet<Poupanca> Poupanca { get; set; }
        public virtual DbSet<PrevidenciaPrivada> PrevidenciaPrivada { get; set; }
        public virtual DbSet<Receber> Receber { get; set; }
        public virtual DbSet<Relatorio> Relatorio { get; set; }
        public virtual DbSet<RendaVariavel> RendaVariavel { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=localhost,1433;Initial Catalog=finances_fake;Persist Security Info=True;User ID=sa;Password=R@@trootroot");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Carteira>(entity =>
            {
                entity.HasKey(e => e.IdCarteira);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Carteira)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Carteira_Usuario");
            });

            modelBuilder.Entity<FormaPagamento>(entity =>
            {
                entity.HasKey(e => e.IdFormaPagamento);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Investimento>(entity =>
            {
                entity.HasKey(e => e.IdInvestimento);

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomeTipoInvestimento)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCarteiraNavigation)
                    .WithMany(p => p.Investimento)
                    .HasForeignKey(d => d.IdCarteira)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Investimento_Carteira");
            });

            modelBuilder.Entity<Pagar>(entity =>
            {
                entity.HasKey(e => e.IdPagar);

                entity.Property(e => e.Categoria)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Data).HasColumnType("datetime");

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.HasOne(d => d.IdCarteiraNavigation)
                    .WithMany(p => p.Pagar)
                    .HasForeignKey(d => d.IdCarteira)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pagar_Carteira");

                entity.HasOne(d => d.IdFormaPagamentoNavigation)
                    .WithMany(p => p.Pagar)
                    .HasForeignKey(d => d.IdFormaPagamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pagar_FormaPagamento");
            });

            modelBuilder.Entity<Poupanca>(entity =>
            {
                entity.HasKey(e => e.IdPoupanca);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdInvestimentoNavigation)
                    .WithMany(p => p.Poupanca)
                    .HasForeignKey(d => d.IdInvestimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Poupanca_Investimento");
            });

            modelBuilder.Entity<PrevidenciaPrivada>(entity =>
            {
                entity.HasKey(e => e.IdPrevidencia);

                entity.Property(e => e.DataAplicacao).HasColumnType("datetime");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.HasOne(d => d.IdInvestimentoNavigation)
                    .WithMany(p => p.PrevidenciaPrivada)
                    .HasForeignKey(d => d.IdInvestimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrevidenciaPrivada_Investimento");
            });

            modelBuilder.Entity<Receber>(entity =>
            {
                entity.HasKey(e => e.IdReceber);

                entity.Property(e => e.Categoria)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);

                entity.Property(e => e.Data).HasColumnType("datetime");

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.HasOne(d => d.IdCarteiraNavigation)
                    .WithMany(p => p.Receber)
                    .HasForeignKey(d => d.IdCarteira)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Receber_Carteira");
            });

            modelBuilder.Entity<Relatorio>(entity =>
            {
                entity.HasKey(e => e.IdRelatorio);

                entity.Property(e => e.DataGeracao).HasColumnType("datetime");

                entity.Property(e => e.TipoRelatorio)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Relatorio)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Relatorio_Usuario");
            });

            modelBuilder.Entity<RendaVariavel>(entity =>
            {
                entity.HasKey(e => e.IdVariavel);

                entity.Property(e => e.DataAplicacao).HasColumnType("datetime");

                entity.Property(e => e.Papel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAplicado).HasColumnType("money");

                entity.HasOne(d => d.IdInvestimentoNavigation)
                    .WithMany(p => p.RendaVariavel)
                    .HasForeignKey(d => d.IdInvestimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RendaVariavel_Investimento");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.IdUsuario);
                entity.Property(x => x.Data_nascimento).IsRequired();
                entity.Property(x => x.Image).IsRequired();
                entity.Property(x => x.Telefone).IsRequired();


                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);

                entity.Property(e => e.Senha)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);

                entity.Property(e => e.Sobrenome)
                    .IsRequired()
                    .HasMaxLength(145)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}